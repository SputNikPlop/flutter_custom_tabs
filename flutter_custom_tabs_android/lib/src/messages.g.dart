// Autogenerated from Pigeon (v14.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

class CustomTabsOptionsMessage {
  CustomTabsOptionsMessage({
    this.colorSchemes,
    this.urlBarHidingEnabled,
    this.shareState,
    this.showTitle,
    this.instantAppsEnabled,
    this.closeButton,
    this.animations,
    this.browser,
    this.partial,
  });

  CustomTabsColorSchemesMessage? colorSchemes;

  bool? urlBarHidingEnabled;

  int? shareState;

  bool? showTitle;

  bool? instantAppsEnabled;

  CustomTabsCloseButtonMessage? closeButton;

  CustomTabsAnimationsMessage? animations;

  CustomTabsBrowserConfigurationMessage? browser;

  PartialCustomTabsConfigurationMessage? partial;

  Object encode() {
    return <Object?>[
      colorSchemes?.encode(),
      urlBarHidingEnabled,
      shareState,
      showTitle,
      instantAppsEnabled,
      closeButton?.encode(),
      animations?.encode(),
      browser?.encode(),
      partial?.encode(),
    ];
  }

  static CustomTabsOptionsMessage decode(Object result) {
    result as List<Object?>;
    return CustomTabsOptionsMessage(
      colorSchemes: result[0] != null
          ? CustomTabsColorSchemesMessage.decode(result[0]! as List<Object?>)
          : null,
      urlBarHidingEnabled: result[1] as bool?,
      shareState: result[2] as int?,
      showTitle: result[3] as bool?,
      instantAppsEnabled: result[4] as bool?,
      closeButton: result[5] != null
          ? CustomTabsCloseButtonMessage.decode(result[5]! as List<Object?>)
          : null,
      animations: result[6] != null
          ? CustomTabsAnimationsMessage.decode(result[6]! as List<Object?>)
          : null,
      browser: result[7] != null
          ? CustomTabsBrowserConfigurationMessage.decode(result[7]! as List<Object?>)
          : null,
      partial: result[8] != null
          ? PartialCustomTabsConfigurationMessage.decode(result[8]! as List<Object?>)
          : null,
    );
  }
}

class CustomTabsAnimationsMessage {
  CustomTabsAnimationsMessage({
    this.startEnter,
    this.startExit,
    this.endEnter,
    this.endExit,
  });

  String? startEnter;

  String? startExit;

  String? endEnter;

  String? endExit;

  Object encode() {
    return <Object?>[
      startEnter,
      startExit,
      endEnter,
      endExit,
    ];
  }

  static CustomTabsAnimationsMessage decode(Object result) {
    result as List<Object?>;
    return CustomTabsAnimationsMessage(
      startEnter: result[0] as String?,
      startExit: result[1] as String?,
      endEnter: result[2] as String?,
      endExit: result[3] as String?,
    );
  }
}

class CustomTabsBrowserConfigurationMessage {
  CustomTabsBrowserConfigurationMessage({
    required this.prefersExternalBrowser,
    this.prefersDefaultBrowser,
    this.fallbackCustomTabs,
    this.headers,
  });

  bool prefersExternalBrowser;

  bool? prefersDefaultBrowser;

  List<String?>? fallbackCustomTabs;

  Map<String?, String?>? headers;

  Object encode() {
    return <Object?>[
      prefersExternalBrowser,
      prefersDefaultBrowser,
      fallbackCustomTabs,
      headers,
    ];
  }

  static CustomTabsBrowserConfigurationMessage decode(Object result) {
    result as List<Object?>;
    return CustomTabsBrowserConfigurationMessage(
      prefersExternalBrowser: result[0]! as bool,
      prefersDefaultBrowser: result[1] as bool?,
      fallbackCustomTabs: (result[2] as List<Object?>?)?.cast<String?>(),
      headers: (result[3] as Map<Object?, Object?>?)?.cast<String?, String?>(),
    );
  }
}

class CustomTabsCloseButtonMessage {
  CustomTabsCloseButtonMessage({
    this.icon,
    this.position,
  });

  String? icon;

  int? position;

  Object encode() {
    return <Object?>[
      icon,
      position,
    ];
  }

  static CustomTabsCloseButtonMessage decode(Object result) {
    result as List<Object?>;
    return CustomTabsCloseButtonMessage(
      icon: result[0] as String?,
      position: result[1] as int?,
    );
  }
}

class CustomTabsColorSchemesMessage {
  CustomTabsColorSchemesMessage({
    this.colorScheme,
    this.lightParams,
    this.darkParams,
    this.defaultPrams,
  });

  int? colorScheme;

  CustomTabsColorSchemeParamsMessage? lightParams;

  CustomTabsColorSchemeParamsMessage? darkParams;

  CustomTabsColorSchemeParamsMessage? defaultPrams;

  Object encode() {
    return <Object?>[
      colorScheme,
      lightParams?.encode(),
      darkParams?.encode(),
      defaultPrams?.encode(),
    ];
  }

  static CustomTabsColorSchemesMessage decode(Object result) {
    result as List<Object?>;
    return CustomTabsColorSchemesMessage(
      colorScheme: result[0] as int?,
      lightParams: result[1] != null
          ? CustomTabsColorSchemeParamsMessage.decode(result[1]! as List<Object?>)
          : null,
      darkParams: result[2] != null
          ? CustomTabsColorSchemeParamsMessage.decode(result[2]! as List<Object?>)
          : null,
      defaultPrams: result[3] != null
          ? CustomTabsColorSchemeParamsMessage.decode(result[3]! as List<Object?>)
          : null,
    );
  }
}

class CustomTabsColorSchemeParamsMessage {
  CustomTabsColorSchemeParamsMessage({
    this.toolbarColor,
    this.navigationBarColor,
    this.navigationBarDividerColor,
  });

  String? toolbarColor;

  String? navigationBarColor;

  String? navigationBarDividerColor;

  Object encode() {
    return <Object?>[
      toolbarColor,
      navigationBarColor,
      navigationBarDividerColor,
    ];
  }

  static CustomTabsColorSchemeParamsMessage decode(Object result) {
    result as List<Object?>;
    return CustomTabsColorSchemeParamsMessage(
      toolbarColor: result[0] as String?,
      navigationBarColor: result[1] as String?,
      navigationBarDividerColor: result[2] as String?,
    );
  }
}

class PartialCustomTabsConfigurationMessage {
  PartialCustomTabsConfigurationMessage({
    required this.initialHeight,
    required this.activityHeightResizeBehavior,
    this.cornerRadius,
  });

  double initialHeight;

  int activityHeightResizeBehavior;

  int? cornerRadius;

  Object encode() {
    return <Object?>[
      initialHeight,
      activityHeightResizeBehavior,
      cornerRadius,
    ];
  }

  static PartialCustomTabsConfigurationMessage decode(Object result) {
    result as List<Object?>;
    return PartialCustomTabsConfigurationMessage(
      initialHeight: result[0]! as double,
      activityHeightResizeBehavior: result[1]! as int,
      cornerRadius: result[2] as int?,
    );
  }
}

class _CustomTabsApiCodec extends StandardMessageCodec {
  const _CustomTabsApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CustomTabsAnimationsMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is CustomTabsBrowserConfigurationMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is CustomTabsCloseButtonMessage) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is CustomTabsColorSchemeParamsMessage) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is CustomTabsColorSchemesMessage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is CustomTabsOptionsMessage) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PartialCustomTabsConfigurationMessage) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return CustomTabsAnimationsMessage.decode(readValue(buffer)!);
      case 129: 
        return CustomTabsBrowserConfigurationMessage.decode(readValue(buffer)!);
      case 130: 
        return CustomTabsCloseButtonMessage.decode(readValue(buffer)!);
      case 131: 
        return CustomTabsColorSchemeParamsMessage.decode(readValue(buffer)!);
      case 132: 
        return CustomTabsColorSchemesMessage.decode(readValue(buffer)!);
      case 133: 
        return CustomTabsOptionsMessage.decode(readValue(buffer)!);
      case 134: 
        return PartialCustomTabsConfigurationMessage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class CustomTabsApi {
  /// Constructor for [CustomTabsApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  CustomTabsApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _CustomTabsApiCodec();

  Future<void> launch(String urlString, {required bool prefersDeepLink, CustomTabsOptionsMessage? options,}) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.flutter_custom_tabs_android.CustomTabsApi.launch';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[urlString, prefersDeepLink, options]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> closeAllIfPossible() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.flutter_custom_tabs_android.CustomTabsApi.closeAllIfPossible';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}
